name: Build, Push and Update Deployment

on:
  # Manual trigger only
  workflow_dispatch:

jobs:
  build-push-deploy:
    runs-on: custom-runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH tools
        run: |
          echo "Installing SSH tools..."
          apk add --no-cache openssh-client
          echo "SSH tools installed successfully"

      - name: Setup SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.RSA_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh

          # Write key to file and fix permissions
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Generate public key
          echo "Generating RSA public key from private key..."
          if ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub 2>/tmp/keygen_error; then
            chmod 644 ~/.ssh/id_rsa.pub
            echo "Public key generated successfully."
          else
            echo "Error generating public key:"
            cat /tmp/keygen_error
            echo "Attempting to fix key format issues..."

            # Sometimes keys need fixing if copied from Windows
            sed -i 's/\r$//' ~/.ssh/id_rsa

            # Try again after fixing
            if ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub 2>/tmp/keygen_error2; then
              chmod 644 ~/.ssh/id_rsa.pub
              echo "Public key generated after fixing format."
            else
              echo "Still failing after format fix:"
              cat /tmp/keygen_error2
              exit 1
            fi
          fi

          # Add gitea server to known hosts (with port 29418)
          ssh-keyscan -p 29418 gitea.watermelonsoft.eu >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Get version tag
        id: get_version
        run: |
          # Get short commit hash
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          
          # Get current date in ISO format for build date
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          echo "Commit hash: $SHORT_SHA"
          echo "Build date: $BUILD_DATE"
          
          # Store values for later steps
          echo "git_commit=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
          
          # Get version tag as before
          if [[ ${{ github.ref_type }} == 'tag' && ${{ github.ref_name }} == v* ]]; then
            # If this is a tag push like v1.2.3, use that as version without the 'v'
            VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            # Otherwise use commit SHA for the version tag
            echo "version=$SHORT_SHA" >> $GITHUB_OUTPUT
          fi
      
      - name: Configure Docker Credentials
        env:
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
        run: |
          # Login to Scaleway registry
          echo "$SCW_SECRET_KEY" | docker login rg.fr-par.scw.cloud -u nologin --password-stdin
          echo "Docker login completed"

      - name: Build Docker image with version information
        run: |
          # Pass git commit and build date to Docker build
          docker build \
            --build-arg GIT_COMMIT=${{ steps.get_version.outputs.git_commit }} \
            --build-arg BUILD_DATE=${{ steps.get_version.outputs.build_date }} \
            -t yuzu:latest .

      - name: Tag Docker images
        run: |
          # Always tag with latest
          docker tag yuzu:latest rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:latest
          
          # Use commit hash as the primary tag
          docker tag yuzu:latest rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:${{ steps.get_version.outputs.git_commit }}
          
          # If we have a version tag, use that too
          if [ ! -z "${{ steps.get_version.outputs.version }}" ]; then
            docker tag yuzu:latest rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:${{ steps.get_version.outputs.version }}
          fi

      - name: Push Docker images to registry
        env:
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
        run: |
          echo "Pushing image with tag: latest"
          docker push rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:latest
          
          echo "Pushing image with tag: ${{ steps.get_version.outputs.git_commit }}"
          docker push rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:${{ steps.get_version.outputs.git_commit }}
          
          # If we have a version tag, push that too
          if [ ! -z "${{ steps.get_version.outputs.version }}" ]; then
            echo "Pushing image with tag: ${{ steps.get_version.outputs.version }}"
            docker push rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:${{ steps.get_version.outputs.version }}
          fi
      
      - name: Configure Git
        run: |
          git config --global user.name "Gitea Workflow"
          git config --global user.email "noreply@gitea.local"

      - name: Clone Deployment Repo with SSH
        run: |
          echo "Attempting to clone via SSH (port 29418)..."

          # Clone with RSA key
          GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa -p 29418 -o IdentitiesOnly=yes -o StrictHostKeyChecking=no" \
          git clone ssh://git@gitea.watermelonsoft.eu:29418/Yuzu/YuzuDeploy.git deploy-repo

          cd deploy-repo
          echo "Successfully cloned deployment repository"

          # Verify we have the expected files
          ls -la
      
      - name: Update Deployment Files
        run: |
          cd deploy-repo

          # Update the image tag in deployment files - use commit hash instead of build number
          sed -i "s|image: rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:.*|image: rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:${{ steps.get_version.outputs.git_commit }}|g" dev/scaleway-yuzu-deployment.yaml

          # Display the changes
          echo "Changes to be committed:"
          git diff dev/scaleway-yuzu-deployment.yaml

          # Commit and push changes
          git add dev/scaleway-yuzu-deployment.yaml
          git commit -m "Update deployment to image with commit ${{ steps.get_version.outputs.git_commit }}"

          # Push with the same SSH command used for cloning
          echo "Pushing with RSA key..."
          GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa -p 29418 -o IdentitiesOnly=yes -o StrictHostKeyChecking=no" \
          git push origin main

          echo "Successfully pushed changes to the deployment repository"