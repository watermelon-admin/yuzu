name: Build, Push and Update Deployment

on:
  # Manual trigger only
  workflow_dispatch:
    inputs:
      ssh_key_type:
        description: 'SSH key type to use (rsa, ed25519)'
        required: true
        default: 'rsa'

jobs:
  build-push-deploy:
    runs-on: custom-runner
    env:
      # Set to 'true' to skip SSH test (for debugging purposes)
      SKIP_SSH_TEST: 'false'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH tools
        run: |
          echo "Installing SSH tools..."
          apk add --no-cache openssh-client
          echo "SSH tools installed successfully"

      - name: Setup SSH key (RSA)
        if: ${{ github.event.inputs.ssh_key_type == 'rsa' }}
        env:
          SSH_PRIVATE_KEY: ${{ secrets.RSA_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh

          # Inspect key format before writing to file
          echo "Inspecting RSA key format..."
          echo "$SSH_PRIVATE_KEY" | grep -c "BEGIN .* PRIVATE KEY" || echo "ERROR: No private key header found"
          echo "$SSH_PRIVATE_KEY" | grep -c "END .* PRIVATE KEY" || echo "ERROR: No private key footer found"
          echo "$SSH_PRIVATE_KEY" | wc -l

          # Write key to file and fix permissions
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Check key format directly
          echo "Contents of key file (first and last 3 lines):"
          head -n 3 ~/.ssh/id_rsa
          echo "..."
          tail -n 3 ~/.ssh/id_rsa

          # Try to generate public key
          echo "Generating RSA public key from private key..."
          if ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub 2>/tmp/keygen_error; then
            chmod 644 ~/.ssh/id_rsa.pub
            echo "Public key generated successfully."

            # Display key fingerprint
            echo "RSA key fingerprint:"
            ssh-keygen -l -f ~/.ssh/id_rsa.pub
          else
            echo "Error generating public key:"
            cat /tmp/keygen_error
            echo "Attempting to fix key format issues..."

            # Sometimes keys need fixing if copied from Windows
            sed -i 's/\r$//' ~/.ssh/id_rsa

            # Try again after fixing
            if ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub 2>/tmp/keygen_error2; then
              chmod 644 ~/.ssh/id_rsa.pub
              echo "Public key generated after fixing format."

              # Display key fingerprint
              echo "RSA key fingerprint:"
              ssh-keygen -l -f ~/.ssh/id_rsa.pub
            else
              echo "Still failing after format fix:"
              cat /tmp/keygen_error2
              exit 1
            fi
          fi

          # Add gitea server to known hosts
          ssh-keyscan gitea.watermelonsoft.eu >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          # Test SSH connection
          echo "Testing SSH connection..."
          timeout 10 ssh -vvv -i ~/.ssh/id_rsa git@gitea.watermelonsoft.eu || true
          echo "SSH test completed"

      - name: Setup SSH key (ED25519)
        if: ${{ github.event.inputs.ssh_key_type == 'ed25519' }}
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          # Generate public key from private key
          echo "Generating ED25519 public key from private key..."
          ssh-keygen -y -f ~/.ssh/id_ed25519 > ~/.ssh/id_ed25519.pub
          chmod 644 ~/.ssh/id_ed25519.pub

          # Display key fingerprint
          echo "ED25519 key fingerprint:"
          ssh-keygen -l -f ~/.ssh/id_ed25519.pub

          # Add gitea server to known hosts
          ssh-keyscan gitea.watermelonsoft.eu >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          # Test SSH connection
          echo "Testing SSH connection..."
          timeout 10 ssh -vvv -i ~/.ssh/id_ed25519 git@gitea.watermelonsoft.eu || true
          echo "SSH test completed"

      - name: Get version tag
        id: get_version
        run: |
          if [[ ${{ github.ref_type }} == 'tag' && ${{ github.ref_name }} == v* ]]; then
            # If this is a tag push like v1.2.3, use that as version without the 'v'
            VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            # Otherwise use commit SHA for untagged builds
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
            echo "version=$SHORT_SHA" >> $GITHUB_OUTPUT
          fi
      
      - name: Configure Docker Credentials
        env:
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
        run: |
          # Login to Scaleway registry
          echo "$SCW_SECRET_KEY" | docker login rg.fr-par.scw.cloud -u nologin --password-stdin
          echo "Docker login completed"

      - name: Build Docker image
        run: docker build -t yuzu:latest .

      - name: Tag Docker images
        run: |
          docker tag yuzu:latest rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:latest
          docker tag yuzu:latest rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:${{ steps.get_version.outputs.version }}

      - name: Push Docker images to registry
        env:
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
        run: |
          echo "Pushing image with tag: latest"
          docker push rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:latest
          
          echo "Pushing image with tag: ${{ steps.get_version.outputs.version }}"
          docker push rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:${{ steps.get_version.outputs.version }}
      
      - name: Configure Git
        run: |
          git config --global user.name "Gitea Workflow"
          git config --global user.email "noreply@gitea.local"

      - name: Clone Deployment Repo with SSH
        run: |
          echo "Attempting to clone via SSH (port 29418)..."

          if [[ "${{ github.event.inputs.ssh_key_type }}" == "rsa" ]]; then
            # Try with the deployment key first
            if [ -f /root/.ssh/yuzu_deploy_rsa ]; then
              echo "Cloning with yuzu_deploy_rsa key..."
              GIT_SSH_COMMAND="ssh -i /root/.ssh/yuzu_deploy_rsa -p 29418 -o IdentitiesOnly=yes" \
              git clone ssh://git@gitea.watermelonsoft.eu:29418/Yuzu/YuzuDeploy.git deploy-repo
            else
              # Fall back to default key
              echo "Cloning with default id_rsa key..."
              GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa -p 29418 -o IdentitiesOnly=yes" \
              git clone ssh://git@gitea.watermelonsoft.eu:29418/Yuzu/YuzuDeploy.git deploy-repo
            fi
          else
            # Try with the deployment key first
            if [ -f /root/.ssh/yuzu_deploy_ed25519 ]; then
              echo "Cloning with yuzu_deploy_ed25519 key..."
              GIT_SSH_COMMAND="ssh -i /root/.ssh/yuzu_deploy_ed25519 -p 29418 -o IdentitiesOnly=yes" \
              git clone ssh://git@gitea.watermelonsoft.eu:29418/Yuzu/YuzuDeploy.git deploy-repo
            else
              # Fall back to default key
              echo "Cloning with default id_ed25519 key..."
              GIT_SSH_COMMAND="ssh -i ~/.ssh/id_ed25519 -p 29418 -o IdentitiesOnly=yes" \
              git clone ssh://git@gitea.watermelonsoft.eu:29418/Yuzu/YuzuDeploy.git deploy-repo
            fi
          fi

          cd deploy-repo
          echo "Successfully cloned deployment repository"

          # Verify we have the expected files
          ls -la
      
      - name: Update Deployment Files
        run: |
          cd deploy-repo
          
          # Update the image tag in deployment files
          sed -i "s|image: rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:.*|image: rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:${{ steps.get_version.outputs.version }}|g" dev/scaleway-yuzu-deployment.yaml
          
          # Commit and push changes
          git add dev/scaleway-yuzu-deployment.yaml
          git commit -m "Update deployment to image version ${{ steps.get_version.outputs.version }}"
          git push origin main