name: Test Repository Access (Custom Port)

# This workflow is only for testing repository access
# It doesn't build or push Docker images

on:
  # Manual trigger only
  workflow_dispatch:
    inputs:
      ssh_key_type:
        description: 'SSH key type to use (rsa, ed25519)'
        required: true
        default: 'rsa'
      skip_ssh_test:
        description: 'Skip SSH connection test (true/false)'
        required: true
        default: 'false'

jobs:
  test-repo-access:
    runs-on: custom-runner
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH tools
        run: |
          echo "Installing SSH tools..."
          apk add --no-cache openssh-client
          echo "SSH tools installed successfully"

      - name: Setup SSH key (RSA)
        if: ${{ github.event.inputs.ssh_key_type == 'rsa' }}
        env:
          SSH_PRIVATE_KEY: ${{ secrets.RSA_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          
          # Inspect key format before writing to file
          echo "Inspecting RSA key format..."
          echo "$SSH_PRIVATE_KEY" | grep -c "BEGIN .* PRIVATE KEY" || echo "ERROR: No private key header found"
          echo "$SSH_PRIVATE_KEY" | grep -c "END .* PRIVATE KEY" || echo "ERROR: No private key footer found"
          echo "$SSH_PRIVATE_KEY" | wc -l
          
          # Write key to file and fix permissions
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Check key format directly
          echo "Contents of key file (first and last 3 lines):"
          head -n 3 ~/.ssh/id_rsa
          echo "..."
          tail -n 3 ~/.ssh/id_rsa
          
          # Try to generate public key
          echo "Generating RSA public key from private key..."
          if ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub 2>/tmp/keygen_error; then
            chmod 644 ~/.ssh/id_rsa.pub
            echo "Public key generated successfully."
            
            # Display key fingerprint
            echo "RSA key fingerprint:"
            ssh-keygen -l -f ~/.ssh/id_rsa.pub
          else
            echo "Error generating public key:"
            cat /tmp/keygen_error
            echo "Attempting to fix key format issues..."
            
            # Sometimes keys need fixing if copied from Windows
            sed -i 's/\r$//' ~/.ssh/id_rsa
            
            # Try again after fixing
            if ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub 2>/tmp/keygen_error2; then
              chmod 644 ~/.ssh/id_rsa.pub
              echo "Public key generated after fixing format."
              
              # Display key fingerprint
              echo "RSA key fingerprint:"
              ssh-keygen -l -f ~/.ssh/id_rsa.pub
            else
              echo "Still failing after format fix:"
              cat /tmp/keygen_error2
              exit 1
            fi
          fi
          
          echo "===== RSA PUBLIC KEY CONTENT ====="
          cat ~/.ssh/id_rsa.pub
          echo "=================================="

      - name: Setup SSH key (ED25519)
        if: ${{ github.event.inputs.ssh_key_type == 'ed25519' }}
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          
          # Generate public key from private key
          echo "Generating ED25519 public key from private key..."
          ssh-keygen -y -f ~/.ssh/id_ed25519 > ~/.ssh/id_ed25519.pub
          chmod 644 ~/.ssh/id_ed25519.pub
          
          # Display key fingerprint
          echo "ED25519 key fingerprint:"
          ssh-keygen -l -f ~/.ssh/id_ed25519.pub
          
          echo "===== ED25519 PUBLIC KEY CONTENT ====="
          cat ~/.ssh/id_ed25519.pub
          echo "======================================"

      - name: Add server to known hosts
        run: |
          # Add gitea server to known hosts (with custom port 29418)
          ssh-keyscan -p 29418 gitea.watermelonsoft.eu >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Test SSH connection
        if: ${{ github.event.inputs.skip_ssh_test != 'true' }}
        run: |
          echo "Testing SSH connection..."
          
          if [[ "${{ github.event.inputs.ssh_key_type }}" == "rsa" ]]; then
            # Try with the deployment key first
            if [ -f /root/.ssh/yuzu_deploy_rsa ]; then
              echo "Testing with yuzu_deploy_rsa key..."
              timeout 10 ssh -vvv -i /root/.ssh/yuzu_deploy_rsa -p 29418 git@gitea.watermelonsoft.eu || true
            else
              # Fall back to default key
              echo "Testing with default id_rsa key..."
              timeout 10 ssh -vvv -i ~/.ssh/id_rsa -p 29418 git@gitea.watermelonsoft.eu || true
            fi
          else
            # Try with the deployment key first
            if [ -f /root/.ssh/yuzu_deploy_ed25519 ]; then
              echo "Testing with yuzu_deploy_ed25519 key..."
              timeout 10 ssh -vvv -i /root/.ssh/yuzu_deploy_ed25519 -p 29418 git@gitea.watermelonsoft.eu || true
            else
              # Fall back to default key
              echo "Testing with default id_ed25519 key..."
              timeout 10 ssh -vvv -i ~/.ssh/id_ed25519 -p 29418 git@gitea.watermelonsoft.eu || true
            fi
          fi
          
          echo "SSH test completed"

      - name: Configure Git
        run: |
          git config --global user.name "Gitea Workflow"
          git config --global user.email "noreply@gitea.local"

      - name: Test clone repository (SSH only)
        run: |
          echo "Attempting to clone repository via SSH..."

          # Skip HTTPS test since it's hanging
          echo "Skipping HTTPS clone test (known to hang)"
          
          # Now try SSH
          if [[ "${{ github.event.inputs.ssh_key_type }}" == "rsa" ]]; then
            # Try with the deployment key first
            if [ -f /root/.ssh/yuzu_deploy_rsa ]; then
              echo "Cloning with yuzu_deploy_rsa key (with 3 minute timeout)..."
              
              # Use the correct port in SSH command and in the URL
              export GIT_SSH_COMMAND="ssh -vvv -i /root/.ssh/yuzu_deploy_rsa -p 29418 -o IdentitiesOnly=yes -o StrictHostKeyChecking=no"
              
              # Use SSH URL format with the port
              timeout 180 git clone ssh://git@gitea.watermelonsoft.eu:29418/uwe/YuzuDeploy.git ssh-test-clone || echo "SSH clone timed out or failed"
              
              if [ -d "ssh-test-clone" ]; then
                echo "SSH clone succeeded!"
                mv ssh-test-clone test-clone
              else
                echo "SSH clone failed, trying HTTPS..."
                # Fall back to HTTPS with basic auth
                echo "Using HTTPS without credentials..."
                git clone https://gitea.watermelonsoft.eu/uwe/YuzuDeploy.git test-clone || echo "HTTPS clone failed too"
              fi
            else
              echo "Deployment key not found, using default key..."
              export GIT_SSH_COMMAND="ssh -vvv -i ~/.ssh/id_rsa -p 29418 -o IdentitiesOnly=yes -o StrictHostKeyChecking=no"
              timeout 180 git clone ssh://git@gitea.watermelonsoft.eu:29418/uwe/YuzuDeploy.git test-clone || \
              git clone https://gitea.watermelonsoft.eu/uwe/YuzuDeploy.git test-clone
            fi
          else
            # Similar pattern for ED25519
            if [ -f /root/.ssh/yuzu_deploy_ed25519 ]; then
              echo "Cloning with yuzu_deploy_ed25519 key (with 3 minute timeout)..."
              export GIT_SSH_COMMAND="ssh -vvv -i /root/.ssh/yuzu_deploy_ed25519 -p 29418 -o IdentitiesOnly=yes -o StrictHostKeyChecking=no"
              timeout 180 git clone ssh://git@gitea.watermelonsoft.eu:29418/uwe/YuzuDeploy.git ssh-test-clone || echo "SSH clone timed out or failed"
              
              if [ -d "ssh-test-clone" ]; then
                echo "SSH clone succeeded!"
                mv ssh-test-clone test-clone
              else
                echo "SSH clone failed, trying HTTPS..."
                git clone https://gitea.watermelonsoft.eu/uwe/YuzuDeploy.git test-clone || echo "HTTPS clone failed too"
              fi
            else
              echo "Deployment key not found, using default key..."
              export GIT_SSH_COMMAND="ssh -vvv -i ~/.ssh/id_ed25519 -p 29418 -o IdentitiesOnly=yes -o StrictHostKeyChecking=no"
              timeout 180 git clone ssh://git@gitea.watermelonsoft.eu:29418/uwe/YuzuDeploy.git test-clone || \
              git clone https://gitea.watermelonsoft.eu/uwe/YuzuDeploy.git test-clone
            fi
          fi
          
          # Check if clone was successful
          if [ -d "test-clone" ]; then
            # Check repository contents
            cd test-clone
            echo "Successfully cloned repository. Contents:"
            ls -la
            echo "Clone test successful!"
          else
            echo "Failed to clone repository with any method!"
            exit 1
          fi