name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: custom-runner
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker
        run: |
          echo "Checking for Docker..."
          if command -v docker &> /dev/null; then
            echo "Docker command found, using existing installation"
          else
            echo "Docker command not found. Checking if Docker is installed but not in PATH..."

            # Check common Docker binary locations
            for docker_path in /usr/bin/docker /usr/local/bin/docker /var/lib/docker/bin/docker; do
              if [ -x "$docker_path" ]; then
                echo "Found Docker at $docker_path, adding to PATH"
                export PATH="$(dirname $docker_path):$PATH"
                break
              fi
            done

            # If still not found, try to install it
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker and dependencies..."
              if command -v apk &> /dev/null; then
                # Alpine
                apk add --no-cache docker docker-cli-buildx
              elif command -v apt-get &> /dev/null; then
                # Ubuntu/Debian
                apt-get update && apt-get install -y docker.io
              else
                echo "Unsupported package manager. Please install Docker manually."
                exit 1
              fi
            fi
          fi

          # Verify Docker is running
          docker info || {
            echo "Docker not running, attempting to start it..."

            # Try to start Docker daemon
            if command -v service &> /dev/null; then
              service docker start
            elif command -v systemctl &> /dev/null; then
              systemctl start docker
            else
              # Last resort, start dockerd directly
              dockerd &
              sleep 5
            fi

            # Final check
            docker info || {
              echo "Failed to start Docker. Check if Docker service is available."
              exit 1
            }
          }

          echo "Docker is ready to use"

      - name: Get version tag
        id: get_version
        run: |
          if [[ ${{ github.ref_type }} == 'tag' && ${{ github.ref_name }} == v* ]]; then
            # If this is a tag push like v1.2.3, use that as version without the 'v'
            VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            # Otherwise use commit SHA for untagged builds
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
            echo "version=$SHORT_SHA" >> $GITHUB_OUTPUT
          fi
        
      - name: Login to Scaleway Container Registry
        run: |
          # Use a simple script approach to avoid TTY issues
          # Store secret in a variable and use it with -p instead
          PASSWORD="${{ secrets.SCW_SECRET_KEY }}"

          # Disable command tracing to avoid showing the password in logs
          set +x

          # Create a script to execute the login command
          cat > /tmp/docker_login.sh << EOF
          #!/bin/sh
          docker login rg.fr-par.scw.cloud -u nologin -p "$PASSWORD"
          EOF

          # Make the script executable
          chmod +x /tmp/docker_login.sh

          # Run the script (won't show the password in logs)
          /tmp/docker_login.sh

          # Clean up
          rm /tmp/docker_login.sh

          # Verify login status
          echo "Docker login completed"

      - name: Build Docker image
        run: docker build -t yuzu:latest .

      - name: Tag Docker images
        run: |
          docker tag yuzu:latest rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:latest
          docker tag yuzu:latest rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:${{ steps.get_version.outputs.version }}

      - name: Verify registry access
        run: |
          echo "Checking registry access..."
          # This command will list repositories in the registry to verify we have access
          docker search rg.fr-par.scw.cloud/cr-yuzu-par-1 || true

      - name: Push Docker images to registry
        run: |
          echo "Pushing image with tag: latest"
          docker push rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:latest

          echo "Pushing image with tag: ${{ steps.get_version.outputs.version }}"
          docker push rg.fr-par.scw.cloud/cr-yuzu-par-1/yuzu-web:${{ steps.get_version.outputs.version }}