# Local Development with User Secrets
# Run these commands to set up your local development environment:

dotnet user-secrets set "ConnectionStrings:DefaultConnection" ""
dotnet user-secrets set "S3Settings:SecretKey" ""
dotnet user-secrets set "PaymentConfig:Stripe:SecretKey" ""
dotnet user-secrets set "MailConnectionConfig:smtpNoReplyPassword" ""
dotnet user-secrets set "MailConnectionConfig:smtpPassword" ""

# Kubernetes Secrets Configuration
# For production deployment in Kubernetes, these secrets should be created as Kubernetes secrets.
# The application will automatically detect when it's running in a Kubernetes environment and 
# load configuration from Kubernetes secrets.

# Method 1: Create a Kubernetes secret with literal values
kubectl create secret generic yuzu-app-secrets \
  --from-literal=ConnectionStrings__DefaultConnection="Host=your-postgres-host;Port=5432;Database=your-database;Username=your-username;Password=your-password;SslMode=Require;" \
  --from-literal=S3Settings__SecretKey="your-s3-secret-key" \
  --from-literal=PaymentConfig__Stripe__SecretKey="your-stripe-secret-key" \
  --from-literal=MailConnectionConfig__smtpNoReplyPassword="your-smtp-noreply-password" \
  --from-literal=MailConnectionConfig__smtpPassword="your-smtp-password"

# Method 2: Create a Kubernetes secret from a file
# First, create a secrets.txt file with the following content:
# ConnectionStrings__DefaultConnection=Host=your-postgres-host;Port=5432;Database=your-database;Username=your-username;Password=your-password;SslMode=Require;
# S3Settings__SecretKey=your-s3-secret-key
# PaymentConfig__Stripe__SecretKey=your-stripe-secret-key
# MailConnectionConfig__smtpNoReplyPassword=your-smtp-noreply-password
# MailConnectionConfig__smtpPassword=your-smtp-password

# Then create the secret:
kubectl create secret generic yuzu-app-secrets --from-file=./secrets.txt

# Notes:
# 1. The application uses double underscores (__) in Kubernetes secret keys to represent nested configuration sections
# 2. The secret name "yuzu-app-secrets" is configured in Program.cs
# 3. If you need to update an existing secret, use 'kubectl create secret generic --dry-run=client -o yaml | kubectl apply -f -'